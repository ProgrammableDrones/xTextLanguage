/*
 * generated by Xtext 2.10.0
 */
grammar InternalXDrone;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.ox.cs.xdrone.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.ox.cs.xdrone.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.ox.cs.xdrone.services.XDroneGrammarAccess;

}
@parser::members {
	private XDroneGrammarAccess grammarAccess;

	public void setGrammarAccess(XDroneGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getMainAssignment()); }
		(rule__Program__MainAssignment)
		{ after(grammarAccess.getProgramAccess().getMainAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMain
entryRuleMain
:
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainAccess().getGroup()); }
		(rule__Main__Group__0)
		{ after(grammarAccess.getMainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHOME
entryRuleHOME
:
{ before(grammarAccess.getHOMERule()); }
	 ruleHOME
{ after(grammarAccess.getHOMERule()); } 
	 EOF 
;

// Rule HOME
ruleHOME 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHOMEAccess().getHomeKeyword()); }
		'home'
		{ after(grammarAccess.getHOMEAccess().getHomeKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEMERGENCY
entryRuleEMERGENCY
:
{ before(grammarAccess.getEMERGENCYRule()); }
	 ruleEMERGENCY
{ after(grammarAccess.getEMERGENCYRule()); } 
	 EOF 
;

// Rule EMERGENCY
ruleEMERGENCY 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEMERGENCYAccess().getEmergencyStopKeyword()); }
		'emergencyStop'
		{ after(grammarAccess.getEMERGENCYAccess().getEmergencyStopKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUP
entryRuleUP
:
{ before(grammarAccess.getUPRule()); }
	 ruleUP
{ after(grammarAccess.getUPRule()); } 
	 EOF 
;

// Rule UP
ruleUP 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUPAccess().getGroup()); }
		(rule__UP__Group__0)
		{ after(grammarAccess.getUPAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDOWN
entryRuleDOWN
:
{ before(grammarAccess.getDOWNRule()); }
	 ruleDOWN
{ after(grammarAccess.getDOWNRule()); } 
	 EOF 
;

// Rule DOWN
ruleDOWN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDOWNAccess().getGroup()); }
		(rule__DOWN__Group__0)
		{ after(grammarAccess.getDOWNAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLEFT
entryRuleLEFT
:
{ before(grammarAccess.getLEFTRule()); }
	 ruleLEFT
{ after(grammarAccess.getLEFTRule()); } 
	 EOF 
;

// Rule LEFT
ruleLEFT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLEFTAccess().getGroup()); }
		(rule__LEFT__Group__0)
		{ after(grammarAccess.getLEFTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRIGHT
entryRuleRIGHT
:
{ before(grammarAccess.getRIGHTRule()); }
	 ruleRIGHT
{ after(grammarAccess.getRIGHTRule()); } 
	 EOF 
;

// Rule RIGHT
ruleRIGHT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRIGHTAccess().getGroup()); }
		(rule__RIGHT__Group__0)
		{ after(grammarAccess.getRIGHTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFORWARD
entryRuleFORWARD
:
{ before(grammarAccess.getFORWARDRule()); }
	 ruleFORWARD
{ after(grammarAccess.getFORWARDRule()); } 
	 EOF 
;

// Rule FORWARD
ruleFORWARD 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFORWARDAccess().getGroup()); }
		(rule__FORWARD__Group__0)
		{ after(grammarAccess.getFORWARDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBACKWARD
entryRuleBACKWARD
:
{ before(grammarAccess.getBACKWARDRule()); }
	 ruleBACKWARD
{ after(grammarAccess.getBACKWARDRule()); } 
	 EOF 
;

// Rule BACKWARD
ruleBACKWARD 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBACKWARDAccess().getGroup()); }
		(rule__BACKWARD__Group__0)
		{ after(grammarAccess.getBACKWARDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleROTATE
entryRuleROTATE
:
{ before(grammarAccess.getROTATERule()); }
	 ruleROTATE
{ after(grammarAccess.getROTATERule()); } 
	 EOF 
;

// Rule ROTATE
ruleROTATE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getROTATEAccess().getGroup()); }
		(rule__ROTATE__Group__0)
		{ after(grammarAccess.getROTATEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getGroup_0()); }
		(rule__Command__Group_0__0)
		{ after(grammarAccess.getCommandAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getGroup_1()); }
		(rule__Command__Group_1__0)
		{ after(grammarAccess.getCommandAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getUPParserRuleCall_2()); }
		ruleUP
		{ after(grammarAccess.getCommandAccess().getUPParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getDOWNParserRuleCall_3()); }
		ruleDOWN
		{ after(grammarAccess.getCommandAccess().getDOWNParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getLEFTParserRuleCall_4()); }
		ruleLEFT
		{ after(grammarAccess.getCommandAccess().getLEFTParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getRIGHTParserRuleCall_5()); }
		ruleRIGHT
		{ after(grammarAccess.getCommandAccess().getRIGHTParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getFORWARDParserRuleCall_6()); }
		ruleFORWARD
		{ after(grammarAccess.getCommandAccess().getFORWARDParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getBACKWARDParserRuleCall_7()); }
		ruleBACKWARD
		{ after(grammarAccess.getCommandAccess().getBACKWARDParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getROTATEParserRuleCall_8()); }
		ruleROTATE
		{ after(grammarAccess.getCommandAccess().getROTATEParserRuleCall_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__0__Impl
	rule__Main__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getXdroneKeyword_0()); }
	'xdrone'
	{ after(grammarAccess.getMainAccess().getXdroneKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__1__Impl
	rule__Main__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getNameAssignment_1()); }
	(rule__Main__NameAssignment_1)
	{ after(grammarAccess.getMainAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__2__Impl
	rule__Main__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getBeginKeyword_2()); }
	'begin'
	{ after(grammarAccess.getMainAccess().getBeginKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__3__Impl
	rule__Main__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getGroup_3()); }
	(rule__Main__Group_3__0)*
	{ after(grammarAccess.getMainAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getMainAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Main__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group_3__0__Impl
	rule__Main__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getCommandsAssignment_3_0()); }
	(rule__Main__CommandsAssignment_3_0)
	{ after(grammarAccess.getMainAccess().getCommandsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getSemicolonKeyword_3_1()); }
	(';')?
	{ after(grammarAccess.getMainAccess().getSemicolonKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_0__0__Impl
	rule__Command__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCommandAction_0_0()); }
	()
	{ after(grammarAccess.getCommandAccess().getCommandAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getHOMEParserRuleCall_0_1()); }
	ruleHOME
	{ after(grammarAccess.getCommandAccess().getHOMEParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1__0__Impl
	rule__Command__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCommandAction_1_0()); }
	()
	{ after(grammarAccess.getCommandAccess().getCommandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getEMERGENCYParserRuleCall_1_1()); }
	ruleEMERGENCY
	{ after(grammarAccess.getCommandAccess().getEMERGENCYParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UP__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UP__Group__0__Impl
	rule__UP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UP__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUPAccess().getUPKeyword_0()); }
	'UP'
	{ after(grammarAccess.getUPAccess().getUPKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UP__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UP__Group__1__Impl
	rule__UP__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UP__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUPAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getUPAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UP__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UP__Group__2__Impl
	rule__UP__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UP__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUPAccess().getMillisecondsAssignment_2()); }
	(rule__UP__MillisecondsAssignment_2)
	{ after(grammarAccess.getUPAccess().getMillisecondsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UP__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UP__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UP__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUPAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getUPAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DOWN__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DOWN__Group__0__Impl
	rule__DOWN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DOWN__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDOWNAccess().getDOWNKeyword_0()); }
	'DOWN'
	{ after(grammarAccess.getDOWNAccess().getDOWNKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOWN__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DOWN__Group__1__Impl
	rule__DOWN__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DOWN__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDOWNAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getDOWNAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOWN__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DOWN__Group__2__Impl
	rule__DOWN__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DOWN__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDOWNAccess().getMillisecondsAssignment_2()); }
	(rule__DOWN__MillisecondsAssignment_2)
	{ after(grammarAccess.getDOWNAccess().getMillisecondsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOWN__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DOWN__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DOWN__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDOWNAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getDOWNAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LEFT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LEFT__Group__0__Impl
	rule__LEFT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLEFTAccess().getLEFTKeyword_0()); }
	'LEFT'
	{ after(grammarAccess.getLEFTAccess().getLEFTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LEFT__Group__1__Impl
	rule__LEFT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLEFTAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLEFTAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LEFT__Group__2__Impl
	rule__LEFT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLEFTAccess().getMillisecondsAssignment_2()); }
	(rule__LEFT__MillisecondsAssignment_2)
	{ after(grammarAccess.getLEFTAccess().getMillisecondsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LEFT__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLEFTAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getLEFTAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RIGHT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RIGHT__Group__0__Impl
	rule__RIGHT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRIGHTAccess().getRIGHTKeyword_0()); }
	'RIGHT'
	{ after(grammarAccess.getRIGHTAccess().getRIGHTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RIGHT__Group__1__Impl
	rule__RIGHT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRIGHTAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRIGHTAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RIGHT__Group__2__Impl
	rule__RIGHT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRIGHTAccess().getMillisecondsAssignment_2()); }
	(rule__RIGHT__MillisecondsAssignment_2)
	{ after(grammarAccess.getRIGHTAccess().getMillisecondsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RIGHT__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRIGHTAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRIGHTAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FORWARD__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FORWARD__Group__0__Impl
	rule__FORWARD__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FORWARD__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFORWARDAccess().getFORWARDKeyword_0()); }
	'FORWARD'
	{ after(grammarAccess.getFORWARDAccess().getFORWARDKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FORWARD__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FORWARD__Group__1__Impl
	rule__FORWARD__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FORWARD__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFORWARDAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFORWARDAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FORWARD__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FORWARD__Group__2__Impl
	rule__FORWARD__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FORWARD__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFORWARDAccess().getMillisecondsAssignment_2()); }
	(rule__FORWARD__MillisecondsAssignment_2)
	{ after(grammarAccess.getFORWARDAccess().getMillisecondsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FORWARD__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FORWARD__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FORWARD__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFORWARDAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFORWARDAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BACKWARD__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BACKWARD__Group__0__Impl
	rule__BACKWARD__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BACKWARD__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBACKWARDAccess().getBACKWARDKeyword_0()); }
	'BACKWARD'
	{ after(grammarAccess.getBACKWARDAccess().getBACKWARDKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BACKWARD__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BACKWARD__Group__1__Impl
	rule__BACKWARD__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BACKWARD__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBACKWARDAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getBACKWARDAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BACKWARD__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BACKWARD__Group__2__Impl
	rule__BACKWARD__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BACKWARD__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBACKWARDAccess().getMillisecondsAssignment_2()); }
	(rule__BACKWARD__MillisecondsAssignment_2)
	{ after(grammarAccess.getBACKWARDAccess().getMillisecondsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BACKWARD__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BACKWARD__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BACKWARD__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBACKWARDAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getBACKWARDAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ROTATE__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROTATE__Group__0__Impl
	rule__ROTATE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ROTATE__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROTATEAccess().getROTATEKeyword_0()); }
	'ROTATE'
	{ after(grammarAccess.getROTATEAccess().getROTATEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROTATE__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROTATE__Group__1__Impl
	rule__ROTATE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ROTATE__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROTATEAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getROTATEAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROTATE__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROTATE__Group__2__Impl
	rule__ROTATE__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ROTATE__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROTATEAccess().getDegreesAssignment_2()); }
	(rule__ROTATE__DegreesAssignment_2)
	{ after(grammarAccess.getROTATEAccess().getDegreesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROTATE__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROTATE__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ROTATE__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROTATEAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getROTATEAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__MainAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getMainMainParserRuleCall_0()); }
		ruleMain
		{ after(grammarAccess.getProgramAccess().getMainMainParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMainAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__CommandsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getCommandsCommandParserRuleCall_3_0_0()); }
		ruleCommand
		{ after(grammarAccess.getMainAccess().getCommandsCommandParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UP__MillisecondsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUPAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getUPAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOWN__MillisecondsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDOWNAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getDOWNAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__MillisecondsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLEFTAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getLEFTAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__MillisecondsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRIGHTAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getRIGHTAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FORWARD__MillisecondsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFORWARDAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getFORWARDAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BACKWARD__MillisecondsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBACKWARDAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getBACKWARDAccess().getMillisecondsINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROTATE__DegreesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getROTATEAccess().getDegreesINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getROTATEAccess().getDegreesINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
