/*
 * generated by Xtext 2.10.0
 */
package uk.ac.ox.cs.xdrone.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import uk.ac.ox.cs.xdrone.ide.contentassist.antlr.internal.InternalXDroneParser;
import uk.ac.ox.cs.xdrone.services.XDroneGrammarAccess;

public class XDroneParser extends AbstractContentAssistParser {

	@Inject
	private XDroneGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalXDroneParser createParser() {
		InternalXDroneParser result = new InternalXDroneParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getMainAccess().getGroup(), "rule__Main__Group__0");
					put(grammarAccess.getMainAccess().getGroup_3(), "rule__Main__Group_3__0");
					put(grammarAccess.getCommandAccess().getGroup_0(), "rule__Command__Group_0__0");
					put(grammarAccess.getCommandAccess().getGroup_1(), "rule__Command__Group_1__0");
					put(grammarAccess.getUPAccess().getGroup(), "rule__UP__Group__0");
					put(grammarAccess.getDOWNAccess().getGroup(), "rule__DOWN__Group__0");
					put(grammarAccess.getLEFTAccess().getGroup(), "rule__LEFT__Group__0");
					put(grammarAccess.getRIGHTAccess().getGroup(), "rule__RIGHT__Group__0");
					put(grammarAccess.getFORWARDAccess().getGroup(), "rule__FORWARD__Group__0");
					put(grammarAccess.getBACKWARDAccess().getGroup(), "rule__BACKWARD__Group__0");
					put(grammarAccess.getROTATEAccess().getGroup(), "rule__ROTATE__Group__0");
					put(grammarAccess.getProgramAccess().getMainAssignment(), "rule__Program__MainAssignment");
					put(grammarAccess.getMainAccess().getNameAssignment_1(), "rule__Main__NameAssignment_1");
					put(grammarAccess.getMainAccess().getCommandsAssignment_3_0(), "rule__Main__CommandsAssignment_3_0");
					put(grammarAccess.getUPAccess().getMillisecondsAssignment_2(), "rule__UP__MillisecondsAssignment_2");
					put(grammarAccess.getDOWNAccess().getMillisecondsAssignment_2(), "rule__DOWN__MillisecondsAssignment_2");
					put(grammarAccess.getLEFTAccess().getMillisecondsAssignment_2(), "rule__LEFT__MillisecondsAssignment_2");
					put(grammarAccess.getRIGHTAccess().getMillisecondsAssignment_2(), "rule__RIGHT__MillisecondsAssignment_2");
					put(grammarAccess.getFORWARDAccess().getMillisecondsAssignment_2(), "rule__FORWARD__MillisecondsAssignment_2");
					put(grammarAccess.getBACKWARDAccess().getMillisecondsAssignment_2(), "rule__BACKWARD__MillisecondsAssignment_2");
					put(grammarAccess.getROTATEAccess().getDegreesAssignment_2(), "rule__ROTATE__DegreesAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalXDroneParser typedParser = (InternalXDroneParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XDroneGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XDroneGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
