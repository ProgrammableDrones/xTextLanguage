/*
 * generated by Xtext 2.10.0
 */
package uk.ac.ox.cs.xdrone.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XDroneGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Program");
		private final Assignment cMainAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMainMainParserRuleCall_0 = (RuleCall)cMainAssignment.eContents().get(0);
		
		//Program:
		//	main=Main;
		@Override public ParserRule getRule() { return rule; }
		
		//main=Main
		public Assignment getMainAssignment() { return cMainAssignment; }
		
		//Main
		public RuleCall getMainMainParserRuleCall_0() { return cMainMainParserRuleCall_0; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXdroneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBeginKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCommandsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCommandsCommandParserRuleCall_3_0_0 = (RuleCall)cCommandsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Main:
		//	'xdrone' name=ID
		//	'begin' (commands+=Command ';'?)*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'xdrone' name=ID 'begin' (commands+=Command ';'?)* 'end'
		public Group getGroup() { return cGroup; }
		
		//'xdrone'
		public Keyword getXdroneKeyword_0() { return cXdroneKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'begin'
		public Keyword getBeginKeyword_2() { return cBeginKeyword_2; }
		
		//(commands+=Command ';'?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_3_0() { return cCommandsAssignment_3_0; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_0_0() { return cCommandsCommandParserRuleCall_3_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCommandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cTakeoffParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCommandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLandParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cUpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDownParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLeftParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRightParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cForwardParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBackwardParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRotateLParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRotateRParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Command:
		//	{Command} Takeoff
		//	| {Command} Land
		//	| Up
		//	| Down
		//	| Left
		//	| Right
		//	| Forward
		//	| Backward
		//	| RotateL
		//	| RotateR;
		@Override public ParserRule getRule() { return rule; }
		
		//{Command} Takeoff | {Command} Land | Up | Down | Left | Right | Forward | Backward | RotateL | RotateR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Command} Takeoff
		public Group getGroup_0() { return cGroup_0; }
		
		//{Command}
		public Action getCommandAction_0_0() { return cCommandAction_0_0; }
		
		//Takeoff
		public RuleCall getTakeoffParserRuleCall_0_1() { return cTakeoffParserRuleCall_0_1; }
		
		//{Command} Land
		public Group getGroup_1() { return cGroup_1; }
		
		//{Command}
		public Action getCommandAction_1_0() { return cCommandAction_1_0; }
		
		//Land
		public RuleCall getLandParserRuleCall_1_1() { return cLandParserRuleCall_1_1; }
		
		//Up
		public RuleCall getUpParserRuleCall_2() { return cUpParserRuleCall_2; }
		
		//Down
		public RuleCall getDownParserRuleCall_3() { return cDownParserRuleCall_3; }
		
		//Left
		public RuleCall getLeftParserRuleCall_4() { return cLeftParserRuleCall_4; }
		
		//Right
		public RuleCall getRightParserRuleCall_5() { return cRightParserRuleCall_5; }
		
		//Forward
		public RuleCall getForwardParserRuleCall_6() { return cForwardParserRuleCall_6; }
		
		//Backward
		public RuleCall getBackwardParserRuleCall_7() { return cBackwardParserRuleCall_7; }
		
		//RotateL
		public RuleCall getRotateLParserRuleCall_8() { return cRotateLParserRuleCall_8; }
		
		//RotateR
		public RuleCall getRotateRParserRuleCall_9() { return cRotateRParserRuleCall_9; }
	}
	public class TakeoffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Takeoff");
		private final Keyword cTAKEOFFKeyword = (Keyword)rule.eContents().get(1);
		
		//Takeoff:
		//	'TAKEOFF';
		@Override public ParserRule getRule() { return rule; }
		
		//'TAKEOFF'
		public Keyword getTAKEOFFKeyword() { return cTAKEOFFKeyword; }
	}
	public class LandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Land");
		private final Keyword cLANDKeyword = (Keyword)rule.eContents().get(1);
		
		//Land:
		//	'LAND';
		@Override public ParserRule getRule() { return rule; }
		
		//'LAND'
		public Keyword getLANDKeyword() { return cLANDKeyword; }
	}
	public class UpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Up");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Up:
		//	'UP' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'UP' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'UP'
		public Keyword getUPKeyword_0() { return cUPKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Down");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDOWNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Down:
		//	'DOWN' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DOWN' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'DOWN'
		public Keyword getDOWNKeyword_0() { return cDOWNKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Left:
		//	'LEFT' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'LEFT' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'LEFT'
		public Keyword getLEFTKeyword_0() { return cLEFTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Right:
		//	'RIGHT' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'RIGHT' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'RIGHT'
		public Keyword getRIGHTKeyword_0() { return cRIGHTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORWARDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Forward:
		//	'FORWARD' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FORWARD' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'FORWARD'
		public Keyword getFORWARDKeyword_0() { return cFORWARDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BackwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Backward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBACKWARDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Backward:
		//	'BACKWARD' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'BACKWARD' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'BACKWARD'
		public Keyword getBACKWARDKeyword_0() { return cBACKWARDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RotateLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.RotateL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cROTATELEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RotateL:
		//	'ROTATELEFT' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ROTATELEFT' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'ROTATELEFT'
		public Keyword getROTATELEFTKeyword_0() { return cROTATELEFTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RotateRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.RotateR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cROTATERIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RotateR:
		//	'ROTATERIGHT' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ROTATERIGHT' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'ROTATERIGHT'
		public Keyword getROTATERIGHTKeyword_0() { return cROTATERIGHTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final ProgramElements pProgram;
	private final MainElements pMain;
	private final CommandElements pCommand;
	private final TakeoffElements pTakeoff;
	private final LandElements pLand;
	private final UpElements pUp;
	private final DownElements pDown;
	private final LeftElements pLeft;
	private final RightElements pRight;
	private final ForwardElements pForward;
	private final BackwardElements pBackward;
	private final RotateLElements pRotateL;
	private final RotateRElements pRotateR;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XDroneGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pMain = new MainElements();
		this.pCommand = new CommandElements();
		this.pTakeoff = new TakeoffElements();
		this.pLand = new LandElements();
		this.pUp = new UpElements();
		this.pDown = new DownElements();
		this.pLeft = new LeftElements();
		this.pRight = new RightElements();
		this.pForward = new ForwardElements();
		this.pBackward = new BackwardElements();
		this.pRotateL = new RotateLElements();
		this.pRotateR = new RotateRElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.ox.cs.xdrone.XDrone".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	main=Main;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Main:
	//	'xdrone' name=ID
	//	'begin' (commands+=Command ';'?)*
	//	'end';
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Command:
	//	{Command} Takeoff
	//	| {Command} Land
	//	| Up
	//	| Down
	//	| Left
	//	| Right
	//	| Forward
	//	| Backward
	//	| RotateL
	//	| RotateR;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Takeoff:
	//	'TAKEOFF';
	public TakeoffElements getTakeoffAccess() {
		return pTakeoff;
	}
	
	public ParserRule getTakeoffRule() {
		return getTakeoffAccess().getRule();
	}
	
	//Land:
	//	'LAND';
	public LandElements getLandAccess() {
		return pLand;
	}
	
	public ParserRule getLandRule() {
		return getLandAccess().getRule();
	}
	
	//Up:
	//	'UP' '(' milliseconds=INT ')';
	public UpElements getUpAccess() {
		return pUp;
	}
	
	public ParserRule getUpRule() {
		return getUpAccess().getRule();
	}
	
	//Down:
	//	'DOWN' '(' milliseconds=INT ')';
	public DownElements getDownAccess() {
		return pDown;
	}
	
	public ParserRule getDownRule() {
		return getDownAccess().getRule();
	}
	
	//Left:
	//	'LEFT' '(' milliseconds=INT ')';
	public LeftElements getLeftAccess() {
		return pLeft;
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}
	
	//Right:
	//	'RIGHT' '(' milliseconds=INT ')';
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//Forward:
	//	'FORWARD' '(' milliseconds=INT ')';
	public ForwardElements getForwardAccess() {
		return pForward;
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}
	
	//Backward:
	//	'BACKWARD' '(' milliseconds=INT ')';
	public BackwardElements getBackwardAccess() {
		return pBackward;
	}
	
	public ParserRule getBackwardRule() {
		return getBackwardAccess().getRule();
	}
	
	//RotateL:
	//	'ROTATELEFT' '(' milliseconds=INT ')';
	public RotateLElements getRotateLAccess() {
		return pRotateL;
	}
	
	public ParserRule getRotateLRule() {
		return getRotateLAccess().getRule();
	}
	
	//RotateR:
	//	'ROTATERIGHT' '(' milliseconds=INT ')';
	public RotateRElements getRotateRAccess() {
		return pRotateR;
	}
	
	public ParserRule getRotateRRule() {
		return getRotateRAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
