/*
 * generated by Xtext 2.10.0
 */
package uk.ac.ox.cs.xdrone.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XDroneGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Program");
		private final Assignment cMainAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMainMainParserRuleCall_0 = (RuleCall)cMainAssignment.eContents().get(0);
		
		//Program:
		//	main=Main;
		@Override public ParserRule getRule() { return rule; }
		
		//main=Main
		public Assignment getMainAssignment() { return cMainAssignment; }
		
		//Main
		public RuleCall getMainMainParserRuleCall_0() { return cMainMainParserRuleCall_0; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXdroneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBeginKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCommandsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCommandsCommandParserRuleCall_3_0_0 = (RuleCall)cCommandsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Main:
		//	'xdrone' name=ID
		//	'begin' (commands+=Command ';'?)*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'xdrone' name=ID 'begin' (commands+=Command ';'?)* 'end'
		public Group getGroup() { return cGroup; }
		
		//'xdrone'
		public Keyword getXdroneKeyword_0() { return cXdroneKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'begin'
		public Keyword getBeginKeyword_2() { return cBeginKeyword_2; }
		
		//(commands+=Command ';'?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_3_0() { return cCommandsAssignment_3_0; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_0_0() { return cCommandsCommandParserRuleCall_3_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCommandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cHOMEParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCommandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cEMERGENCYParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cUPParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDOWNParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLEFTParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRIGHTParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFORWARDParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBACKWARDParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cROTATEParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Command:
		//	{Command} HOME
		//	| {Command} EMERGENCY
		//	| UP
		//	| DOWN
		//	| LEFT
		//	| RIGHT
		//	| FORWARD
		//	| BACKWARD
		//	| ROTATE;
		@Override public ParserRule getRule() { return rule; }
		
		//{Command} HOME | {Command} EMERGENCY | UP | DOWN | LEFT | RIGHT | FORWARD | BACKWARD | ROTATE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Command} HOME
		public Group getGroup_0() { return cGroup_0; }
		
		//{Command}
		public Action getCommandAction_0_0() { return cCommandAction_0_0; }
		
		//HOME
		public RuleCall getHOMEParserRuleCall_0_1() { return cHOMEParserRuleCall_0_1; }
		
		//{Command} EMERGENCY
		public Group getGroup_1() { return cGroup_1; }
		
		//{Command}
		public Action getCommandAction_1_0() { return cCommandAction_1_0; }
		
		//EMERGENCY
		public RuleCall getEMERGENCYParserRuleCall_1_1() { return cEMERGENCYParserRuleCall_1_1; }
		
		//UP
		public RuleCall getUPParserRuleCall_2() { return cUPParserRuleCall_2; }
		
		//DOWN
		public RuleCall getDOWNParserRuleCall_3() { return cDOWNParserRuleCall_3; }
		
		//LEFT
		public RuleCall getLEFTParserRuleCall_4() { return cLEFTParserRuleCall_4; }
		
		//RIGHT
		public RuleCall getRIGHTParserRuleCall_5() { return cRIGHTParserRuleCall_5; }
		
		//FORWARD
		public RuleCall getFORWARDParserRuleCall_6() { return cFORWARDParserRuleCall_6; }
		
		//BACKWARD
		public RuleCall getBACKWARDParserRuleCall_7() { return cBACKWARDParserRuleCall_7; }
		
		//ROTATE
		public RuleCall getROTATEParserRuleCall_8() { return cROTATEParserRuleCall_8; }
	}
	public class HOMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.HOME");
		private final Keyword cHomeKeyword = (Keyword)rule.eContents().get(1);
		
		//HOME:
		//	'home';
		@Override public ParserRule getRule() { return rule; }
		
		//'home'
		public Keyword getHomeKeyword() { return cHomeKeyword; }
	}
	public class EMERGENCYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.EMERGENCY");
		private final Keyword cEmergencyStopKeyword = (Keyword)rule.eContents().get(1);
		
		//EMERGENCY:
		//	'emergencyStop';
		@Override public ParserRule getRule() { return rule; }
		
		//'emergencyStop'
		public Keyword getEmergencyStopKeyword() { return cEmergencyStopKeyword; }
	}
	public class UPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.UP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UP:
		//	'UP' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'UP' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'UP'
		public Keyword getUPKeyword_0() { return cUPKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DOWNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.DOWN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDOWNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DOWN:
		//	'DOWN' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DOWN' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'DOWN'
		public Keyword getDOWNKeyword_0() { return cDOWNKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LEFTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.LEFT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LEFT:
		//	'LEFT' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'LEFT' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'LEFT'
		public Keyword getLEFTKeyword_0() { return cLEFTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RIGHTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.RIGHT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RIGHT:
		//	'RIGHT' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'RIGHT' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'RIGHT'
		public Keyword getRIGHTKeyword_0() { return cRIGHTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FORWARDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.FORWARD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORWARDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FORWARD:
		//	'FORWARD' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FORWARD' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'FORWARD'
		public Keyword getFORWARDKeyword_0() { return cFORWARDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BACKWARDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.BACKWARD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBACKWARDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecondsINTTerminalRuleCall_2_0 = (RuleCall)cMillisecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BACKWARD:
		//	'BACKWARD' '(' milliseconds=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'BACKWARD' '(' milliseconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'BACKWARD'
		public Keyword getBACKWARDKeyword_0() { return cBACKWARDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_2() { return cMillisecondsAssignment_2; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_2_0() { return cMillisecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ROTATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.xdrone.XDrone.ROTATE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cROTATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDegreesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDegreesINTTerminalRuleCall_2_0 = (RuleCall)cDegreesAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ROTATE:
		//	'ROTATE' '(' degrees=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ROTATE' '(' degrees=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'ROTATE'
		public Keyword getROTATEKeyword_0() { return cROTATEKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//degrees=INT
		public Assignment getDegreesAssignment_2() { return cDegreesAssignment_2; }
		
		//INT
		public RuleCall getDegreesINTTerminalRuleCall_2_0() { return cDegreesINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final ProgramElements pProgram;
	private final MainElements pMain;
	private final CommandElements pCommand;
	private final HOMEElements pHOME;
	private final EMERGENCYElements pEMERGENCY;
	private final UPElements pUP;
	private final DOWNElements pDOWN;
	private final LEFTElements pLEFT;
	private final RIGHTElements pRIGHT;
	private final FORWARDElements pFORWARD;
	private final BACKWARDElements pBACKWARD;
	private final ROTATEElements pROTATE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XDroneGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pMain = new MainElements();
		this.pCommand = new CommandElements();
		this.pHOME = new HOMEElements();
		this.pEMERGENCY = new EMERGENCYElements();
		this.pUP = new UPElements();
		this.pDOWN = new DOWNElements();
		this.pLEFT = new LEFTElements();
		this.pRIGHT = new RIGHTElements();
		this.pFORWARD = new FORWARDElements();
		this.pBACKWARD = new BACKWARDElements();
		this.pROTATE = new ROTATEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.ox.cs.xdrone.XDrone".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	main=Main;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Main:
	//	'xdrone' name=ID
	//	'begin' (commands+=Command ';'?)*
	//	'end';
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Command:
	//	{Command} HOME
	//	| {Command} EMERGENCY
	//	| UP
	//	| DOWN
	//	| LEFT
	//	| RIGHT
	//	| FORWARD
	//	| BACKWARD
	//	| ROTATE;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//HOME:
	//	'home';
	public HOMEElements getHOMEAccess() {
		return pHOME;
	}
	
	public ParserRule getHOMERule() {
		return getHOMEAccess().getRule();
	}
	
	//EMERGENCY:
	//	'emergencyStop';
	public EMERGENCYElements getEMERGENCYAccess() {
		return pEMERGENCY;
	}
	
	public ParserRule getEMERGENCYRule() {
		return getEMERGENCYAccess().getRule();
	}
	
	//UP:
	//	'UP' '(' milliseconds=INT ')';
	public UPElements getUPAccess() {
		return pUP;
	}
	
	public ParserRule getUPRule() {
		return getUPAccess().getRule();
	}
	
	//DOWN:
	//	'DOWN' '(' milliseconds=INT ')';
	public DOWNElements getDOWNAccess() {
		return pDOWN;
	}
	
	public ParserRule getDOWNRule() {
		return getDOWNAccess().getRule();
	}
	
	//LEFT:
	//	'LEFT' '(' milliseconds=INT ')';
	public LEFTElements getLEFTAccess() {
		return pLEFT;
	}
	
	public ParserRule getLEFTRule() {
		return getLEFTAccess().getRule();
	}
	
	//RIGHT:
	//	'RIGHT' '(' milliseconds=INT ')';
	public RIGHTElements getRIGHTAccess() {
		return pRIGHT;
	}
	
	public ParserRule getRIGHTRule() {
		return getRIGHTAccess().getRule();
	}
	
	//FORWARD:
	//	'FORWARD' '(' milliseconds=INT ')';
	public FORWARDElements getFORWARDAccess() {
		return pFORWARD;
	}
	
	public ParserRule getFORWARDRule() {
		return getFORWARDAccess().getRule();
	}
	
	//BACKWARD:
	//	'BACKWARD' '(' milliseconds=INT ')';
	public BACKWARDElements getBACKWARDAccess() {
		return pBACKWARD;
	}
	
	public ParserRule getBACKWARDRule() {
		return getBACKWARDAccess().getRule();
	}
	
	//ROTATE:
	//	'ROTATE' '(' degrees=INT ')';
	public ROTATEElements getROTATEAccess() {
		return pROTATE;
	}
	
	public ParserRule getROTATERule() {
		return getROTATEAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
