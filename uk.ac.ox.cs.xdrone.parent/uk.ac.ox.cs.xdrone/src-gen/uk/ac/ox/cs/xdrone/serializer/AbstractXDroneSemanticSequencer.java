/*
 * generated by Xtext 2.10.0
 */
package uk.ac.ox.cs.xdrone.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.ox.cs.xdrone.services.XDroneGrammarAccess;
import uk.ac.ox.cs.xdrone.xDrone.Backward;
import uk.ac.ox.cs.xdrone.xDrone.Command;
import uk.ac.ox.cs.xdrone.xDrone.Down;
import uk.ac.ox.cs.xdrone.xDrone.Forward;
import uk.ac.ox.cs.xdrone.xDrone.Left;
import uk.ac.ox.cs.xdrone.xDrone.Main;
import uk.ac.ox.cs.xdrone.xDrone.Program;
import uk.ac.ox.cs.xdrone.xDrone.Right;
import uk.ac.ox.cs.xdrone.xDrone.RotateL;
import uk.ac.ox.cs.xdrone.xDrone.RotateR;
import uk.ac.ox.cs.xdrone.xDrone.Up;
import uk.ac.ox.cs.xdrone.xDrone.XDronePackage;

@SuppressWarnings("all")
public abstract class AbstractXDroneSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XDroneGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == XDronePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XDronePackage.BACKWARD:
				sequence_Backward(context, (Backward) semanticObject); 
				return; 
			case XDronePackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case XDronePackage.DOWN:
				sequence_Down(context, (Down) semanticObject); 
				return; 
			case XDronePackage.FORWARD:
				sequence_Forward(context, (Forward) semanticObject); 
				return; 
			case XDronePackage.LEFT:
				sequence_Left(context, (Left) semanticObject); 
				return; 
			case XDronePackage.MAIN:
				sequence_Main(context, (Main) semanticObject); 
				return; 
			case XDronePackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case XDronePackage.RIGHT:
				sequence_Right(context, (Right) semanticObject); 
				return; 
			case XDronePackage.ROTATE_L:
				sequence_RotateL(context, (RotateL) semanticObject); 
				return; 
			case XDronePackage.ROTATE_R:
				sequence_RotateR(context, (RotateR) semanticObject); 
				return; 
			case XDronePackage.UP:
				sequence_Up(context, (Up) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Command returns Backward
	 *     Backward returns Backward
	 *
	 * Constraint:
	 *     milliseconds=INT
	 */
	protected void sequence_Backward(ISerializationContext context, Backward semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBackwardAccess().getMillisecondsINTTerminalRuleCall_2_0(), semanticObject.getMilliseconds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     {Command}
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Down
	 *     Down returns Down
	 *
	 * Constraint:
	 *     milliseconds=INT
	 */
	protected void sequence_Down(ISerializationContext context, Down semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDownAccess().getMillisecondsINTTerminalRuleCall_2_0(), semanticObject.getMilliseconds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Forward
	 *     Forward returns Forward
	 *
	 * Constraint:
	 *     milliseconds=INT
	 */
	protected void sequence_Forward(ISerializationContext context, Forward semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForwardAccess().getMillisecondsINTTerminalRuleCall_2_0(), semanticObject.getMilliseconds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Left
	 *     Left returns Left
	 *
	 * Constraint:
	 *     milliseconds=INT
	 */
	protected void sequence_Left(ISerializationContext context, Left semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLeftAccess().getMillisecondsINTTerminalRuleCall_2_0(), semanticObject.getMilliseconds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Main returns Main
	 *
	 * Constraint:
	 *     (name=ID commands+=Command*)
	 */
	protected void sequence_Main(ISerializationContext context, Main semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     main=Main
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDronePackage.Literals.PROGRAM__MAIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDronePackage.Literals.PROGRAM__MAIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProgramAccess().getMainMainParserRuleCall_0(), semanticObject.getMain());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Right
	 *     Right returns Right
	 *
	 * Constraint:
	 *     milliseconds=INT
	 */
	protected void sequence_Right(ISerializationContext context, Right semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRightAccess().getMillisecondsINTTerminalRuleCall_2_0(), semanticObject.getMilliseconds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns RotateL
	 *     RotateL returns RotateL
	 *
	 * Constraint:
	 *     milliseconds=INT
	 */
	protected void sequence_RotateL(ISerializationContext context, RotateL semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotateLAccess().getMillisecondsINTTerminalRuleCall_2_0(), semanticObject.getMilliseconds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns RotateR
	 *     RotateR returns RotateR
	 *
	 * Constraint:
	 *     milliseconds=INT
	 */
	protected void sequence_RotateR(ISerializationContext context, RotateR semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotateRAccess().getMillisecondsINTTerminalRuleCall_2_0(), semanticObject.getMilliseconds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Up
	 *     Up returns Up
	 *
	 * Constraint:
	 *     milliseconds=INT
	 */
	protected void sequence_Up(ISerializationContext context, Up semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDronePackage.Literals.COMMAND__MILLISECONDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpAccess().getMillisecondsINTTerminalRuleCall_2_0(), semanticObject.getMilliseconds());
		feeder.finish();
	}
	
	
}
