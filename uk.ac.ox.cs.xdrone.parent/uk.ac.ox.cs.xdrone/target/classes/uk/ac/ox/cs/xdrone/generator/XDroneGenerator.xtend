/*
 * generated by Xtext 2.10.0
 */
package uk.ac.ox.cs.xdrone.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.ox.cs.xdrone.xDrone.Main
import org.eclipse.xtext.generator.JavaIoFileSystemAccess
import com.google.inject.Guice
import org.eclipse.xtext.service.AbstractGenericModule
import org.eclipse.xtext.parser.IEncodingProvider
import java.io.IOException
import java.io.PrintWriter
import uk.ac.ox.cs.xdrone.xDrone.UP
import uk.ac.ox.cs.xdrone.xDrone.Command

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class XDroneGenerator extends AbstractGenerator {

	def compile(Main main)'''
		var arDrone = require('ar-drone'); 
		var client  = arDrone.createClient();
		«FOR f : main.commands» 
			«f.compile»
		«ENDFOR»
	'''
	
	def compile(Command up) '''
		«IF up instanceof UP »
		
		client.takeoff();
		
		client
		  .after(«up.milliseconds», function() {
		    this.clockwise(0.5);
		  })
		  .after(«up.milliseconds», function() {
		    this.stop();
		    this.land();
	  	  });
	  	«ENDIF»
	'''
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var result = "";
		for(main : resource.allContents.toIterable.filter(Main)) {
			result = main.compile.toString; 
			fsa.generateFile('result.js', result)
		
		}

		var main = null;
		if (resource.allContents
				.filter(typeof(Main)) != null) {
					////main = resource.allContents.toIterable.filter(typeof(Main))
				}
		
		try {
		    var writer = new PrintWriter("/tmp/result.js", "UTF-8");
		    writer.println(result);
		    writer.close();
		} catch (IOException e) {
		   // do something
		}
		
		
		
		/*
		var fsa1 = new JavaIoFileSystemAccess();
		
		Guice.createInjector(new AbstractGenericModule() {
			
			public Class<? extends IEncodingProvider> bindIEncodingProvider() {
				return IEncodingProvider.Runtime.class;
			}
			
		}).injectMembers(fsa);
		

		fsa1.setOutputPath("/tmp");
		fsa1.generateFile("xxxx.txt", "contents");
		*/
		
		//fsa.setOutputPath('/tmp')
		fsa.generateFile('result.js', result)
		
			/* 
			resource.allContents
				.filter(typeof(Main))
				.map[name]
				.join(', ')
				)*/
	}
}
