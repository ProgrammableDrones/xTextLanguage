/*
 * generated by Xtext 2.10.0
 */
grammar InternalXDrone;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.ox.cs.xdrone.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.ox.cs.xdrone.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.ox.cs.xdrone.services.XDroneGrammarAccess;

}

@parser::members {

 	private XDroneGrammarAccess grammarAccess;

    public InternalXDroneParser(TokenStream input, XDroneGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected XDroneGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getMainMainParserRuleCall_0());
			}
			lv_main_0_0=ruleMain
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				set(
					$current,
					"main",
					lv_main_0_0,
					"uk.ac.ox.cs.xdrone.XDrone.Main");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	iv_ruleMain=ruleMain
	{ $current=$iv_ruleMain.current; }
	EOF;

// Rule Main
ruleMain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='xdrone'
		{
			newLeafNode(otherlv_0, grammarAccess.getMainAccess().getXdroneKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMainAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMainRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='begin'
		{
			newLeafNode(otherlv_2, grammarAccess.getMainAccess().getBeginKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMainAccess().getCommandsCommandParserRuleCall_3_0_0());
					}
					lv_commands_3_0=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMainRule());
						}
						add(
							$current,
							"commands",
							lv_commands_3_0,
							"uk.ac.ox.cs.xdrone.XDrone.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=';'
				{
					newLeafNode(otherlv_4, grammarAccess.getMainAccess().getSemicolonKeyword_3_1());
				}
			)?
		)*
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getMainAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommandAccess().getCommandAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getCommandAccess().getHOMEParserRuleCall_0_1());
			}
			ruleHOME
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommandAccess().getCommandAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getCommandAccess().getEMERGENCYParserRuleCall_1_1());
			}
			ruleEMERGENCY
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getUPParserRuleCall_2());
		}
		this_UP_4=ruleUP
		{
			$current = $this_UP_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getDOWNParserRuleCall_3());
		}
		this_DOWN_5=ruleDOWN
		{
			$current = $this_DOWN_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getLEFTParserRuleCall_4());
		}
		this_LEFT_6=ruleLEFT
		{
			$current = $this_LEFT_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getRIGHTParserRuleCall_5());
		}
		this_RIGHT_7=ruleRIGHT
		{
			$current = $this_RIGHT_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getFORWARDParserRuleCall_6());
		}
		this_FORWARD_8=ruleFORWARD
		{
			$current = $this_FORWARD_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getBACKWARDParserRuleCall_7());
		}
		this_BACKWARD_9=ruleBACKWARD
		{
			$current = $this_BACKWARD_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getROTATEParserRuleCall_8());
		}
		this_ROTATE_10=ruleROTATE
		{
			$current = $this_ROTATE_10.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHOME
entryRuleHOME returns [String current=null]:
	{ newCompositeNode(grammarAccess.getHOMERule()); }
	iv_ruleHOME=ruleHOME
	{ $current=$iv_ruleHOME.current.getText(); }
	EOF;

// Rule HOME
ruleHOME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='home'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getHOMEAccess().getHomeKeyword());
	}
;

// Entry rule entryRuleEMERGENCY
entryRuleEMERGENCY returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEMERGENCYRule()); }
	iv_ruleEMERGENCY=ruleEMERGENCY
	{ $current=$iv_ruleEMERGENCY.current.getText(); }
	EOF;

// Rule EMERGENCY
ruleEMERGENCY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='emergencyStop'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEMERGENCYAccess().getEmergencyStopKeyword());
	}
;

// Entry rule entryRuleUP
entryRuleUP returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUPRule()); }
	iv_ruleUP=ruleUP
	{ $current=$iv_ruleUP.current; }
	EOF;

// Rule UP
ruleUP returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='UP'
		{
			newLeafNode(otherlv_0, grammarAccess.getUPAccess().getUPKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getUPAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getUPAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUPRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getUPAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleDOWN
entryRuleDOWN returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDOWNRule()); }
	iv_ruleDOWN=ruleDOWN
	{ $current=$iv_ruleDOWN.current; }
	EOF;

// Rule DOWN
ruleDOWN returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DOWN'
		{
			newLeafNode(otherlv_0, grammarAccess.getDOWNAccess().getDOWNKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getDOWNAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getDOWNAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDOWNRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getDOWNAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLEFT
entryRuleLEFT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLEFTRule()); }
	iv_ruleLEFT=ruleLEFT
	{ $current=$iv_ruleLEFT.current; }
	EOF;

// Rule LEFT
ruleLEFT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LEFT'
		{
			newLeafNode(otherlv_0, grammarAccess.getLEFTAccess().getLEFTKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLEFTAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getLEFTAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLEFTRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getLEFTAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleRIGHT
entryRuleRIGHT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRIGHTRule()); }
	iv_ruleRIGHT=ruleRIGHT
	{ $current=$iv_ruleRIGHT.current; }
	EOF;

// Rule RIGHT
ruleRIGHT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='RIGHT'
		{
			newLeafNode(otherlv_0, grammarAccess.getRIGHTAccess().getRIGHTKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRIGHTAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getRIGHTAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRIGHTRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getRIGHTAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFORWARD
entryRuleFORWARD returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFORWARDRule()); }
	iv_ruleFORWARD=ruleFORWARD
	{ $current=$iv_ruleFORWARD.current; }
	EOF;

// Rule FORWARD
ruleFORWARD returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FORWARD'
		{
			newLeafNode(otherlv_0, grammarAccess.getFORWARDAccess().getFORWARDKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFORWARDAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getFORWARDAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFORWARDRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFORWARDAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleBACKWARD
entryRuleBACKWARD returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBACKWARDRule()); }
	iv_ruleBACKWARD=ruleBACKWARD
	{ $current=$iv_ruleBACKWARD.current; }
	EOF;

// Rule BACKWARD
ruleBACKWARD returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BACKWARD'
		{
			newLeafNode(otherlv_0, grammarAccess.getBACKWARDAccess().getBACKWARDKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBACKWARDAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getBACKWARDAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBACKWARDRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getBACKWARDAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleROTATE
entryRuleROTATE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getROTATERule()); }
	iv_ruleROTATE=ruleROTATE
	{ $current=$iv_ruleROTATE.current; }
	EOF;

// Rule ROTATE
ruleROTATE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ROTATE'
		{
			newLeafNode(otherlv_0, grammarAccess.getROTATEAccess().getROTATEKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getROTATEAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_degrees_2_0=RULE_INT
				{
					newLeafNode(lv_degrees_2_0, grammarAccess.getROTATEAccess().getDegreesINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getROTATERule());
					}
					setWithLastConsumed(
						$current,
						"degrees",
						lv_degrees_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getROTATEAccess().getRightParenthesisKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
