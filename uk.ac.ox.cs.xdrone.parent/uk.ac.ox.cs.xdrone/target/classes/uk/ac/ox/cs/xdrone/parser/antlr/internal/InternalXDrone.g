/*
 * generated by Xtext 2.10.0
 */
grammar InternalXDrone;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.ox.cs.xdrone.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.ox.cs.xdrone.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.ox.cs.xdrone.services.XDroneGrammarAccess;

}

@parser::members {

 	private XDroneGrammarAccess grammarAccess;

    public InternalXDroneParser(TokenStream input, XDroneGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected XDroneGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getMainMainParserRuleCall_0());
			}
			lv_main_0_0=ruleMain
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				set(
					$current,
					"main",
					lv_main_0_0,
					"uk.ac.ox.cs.xdrone.XDrone.Main");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	iv_ruleMain=ruleMain
	{ $current=$iv_ruleMain.current; }
	EOF;

// Rule Main
ruleMain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='xdrone'
		{
			newLeafNode(otherlv_0, grammarAccess.getMainAccess().getXdroneKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMainAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMainRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='begin'
		{
			newLeafNode(otherlv_2, grammarAccess.getMainAccess().getBeginKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMainAccess().getCommandsCommandParserRuleCall_3_0_0());
					}
					lv_commands_3_0=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMainRule());
						}
						add(
							$current,
							"commands",
							lv_commands_3_0,
							"uk.ac.ox.cs.xdrone.XDrone.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=';'
				{
					newLeafNode(otherlv_4, grammarAccess.getMainAccess().getSemicolonKeyword_3_1());
				}
			)?
		)*
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getMainAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommandAccess().getCommandAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getCommandAccess().getTakeoffParserRuleCall_0_1());
			}
			ruleTakeoff
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommandAccess().getCommandAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getCommandAccess().getLandParserRuleCall_1_1());
			}
			ruleLand
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getUpParserRuleCall_2());
		}
		this_Up_4=ruleUp
		{
			$current = $this_Up_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getDownParserRuleCall_3());
		}
		this_Down_5=ruleDown
		{
			$current = $this_Down_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getLeftParserRuleCall_4());
		}
		this_Left_6=ruleLeft
		{
			$current = $this_Left_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getRightParserRuleCall_5());
		}
		this_Right_7=ruleRight
		{
			$current = $this_Right_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getForwardParserRuleCall_6());
		}
		this_Forward_8=ruleForward
		{
			$current = $this_Forward_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getBackwardParserRuleCall_7());
		}
		this_Backward_9=ruleBackward
		{
			$current = $this_Backward_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getRotateLParserRuleCall_8());
		}
		this_RotateL_10=ruleRotateL
		{
			$current = $this_RotateL_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getRotateRParserRuleCall_9());
		}
		this_RotateR_11=ruleRotateR
		{
			$current = $this_RotateR_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getWaitParserRuleCall_10());
		}
		this_Wait_12=ruleWait
		{
			$current = $this_Wait_12.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTakeoff
entryRuleTakeoff returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTakeoffRule()); }
	iv_ruleTakeoff=ruleTakeoff
	{ $current=$iv_ruleTakeoff.current.getText(); }
	EOF;

// Rule Takeoff
ruleTakeoff returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='TAKEOFF'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTakeoffAccess().getTAKEOFFKeyword());
	}
;

// Entry rule entryRuleLand
entryRuleLand returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLandRule()); }
	iv_ruleLand=ruleLand
	{ $current=$iv_ruleLand.current.getText(); }
	EOF;

// Rule Land
ruleLand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='LAND'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLandAccess().getLANDKeyword());
	}
;

// Entry rule entryRuleUp
entryRuleUp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpRule()); }
	iv_ruleUp=ruleUp
	{ $current=$iv_ruleUp.current; }
	EOF;

// Rule Up
ruleUp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='UP'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpAccess().getUPKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getUpAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getUpAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUpRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getUpAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleDown
entryRuleDown returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDownRule()); }
	iv_ruleDown=ruleDown
	{ $current=$iv_ruleDown.current; }
	EOF;

// Rule Down
ruleDown returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DOWN'
		{
			newLeafNode(otherlv_0, grammarAccess.getDownAccess().getDOWNKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getDownAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getDownAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDownRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getDownAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLeft
entryRuleLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	iv_ruleLeft=ruleLeft
	{ $current=$iv_ruleLeft.current; }
	EOF;

// Rule Left
ruleLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LEFT'
		{
			newLeafNode(otherlv_0, grammarAccess.getLeftAccess().getLEFTKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLeftAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getLeftAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLeftRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getLeftAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleRight
entryRuleRight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightRule()); }
	iv_ruleRight=ruleRight
	{ $current=$iv_ruleRight.current; }
	EOF;

// Rule Right
ruleRight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='RIGHT'
		{
			newLeafNode(otherlv_0, grammarAccess.getRightAccess().getRIGHTKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRightAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getRightAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRightRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getRightAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleForward
entryRuleForward returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForwardRule()); }
	iv_ruleForward=ruleForward
	{ $current=$iv_ruleForward.current; }
	EOF;

// Rule Forward
ruleForward returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FORWARD'
		{
			newLeafNode(otherlv_0, grammarAccess.getForwardAccess().getFORWARDKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getForwardAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getForwardAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForwardRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getForwardAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleBackward
entryRuleBackward returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBackwardRule()); }
	iv_ruleBackward=ruleBackward
	{ $current=$iv_ruleBackward.current; }
	EOF;

// Rule Backward
ruleBackward returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BACKWARD'
		{
			newLeafNode(otherlv_0, grammarAccess.getBackwardAccess().getBACKWARDKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBackwardAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getBackwardAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBackwardRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getBackwardAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleRotateL
entryRuleRotateL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRotateLRule()); }
	iv_ruleRotateL=ruleRotateL
	{ $current=$iv_ruleRotateL.current; }
	EOF;

// Rule RotateL
ruleRotateL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ROTATELEFT'
		{
			newLeafNode(otherlv_0, grammarAccess.getRotateLAccess().getROTATELEFTKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRotateLAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getRotateLAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateLRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getRotateLAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleRotateR
entryRuleRotateR returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRotateRRule()); }
	iv_ruleRotateR=ruleRotateR
	{ $current=$iv_ruleRotateR.current; }
	EOF;

// Rule RotateR
ruleRotateR returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ROTATERIGHT'
		{
			newLeafNode(otherlv_0, grammarAccess.getRotateRAccess().getROTATERIGHTKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRotateRAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getRotateRAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateRRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getRotateRAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleWait
entryRuleWait returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWaitRule()); }
	iv_ruleWait=ruleWait
	{ $current=$iv_ruleWait.current; }
	EOF;

// Rule Wait
ruleWait returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='WAIT'
		{
			newLeafNode(otherlv_0, grammarAccess.getWaitAccess().getWAITKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWaitAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_milliseconds_2_0=RULE_INT
				{
					newLeafNode(lv_milliseconds_2_0, grammarAccess.getWaitAccess().getMillisecondsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWaitRule());
					}
					setWithLastConsumed(
						$current,
						"milliseconds",
						lv_milliseconds_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWaitAccess().getRightParenthesisKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
