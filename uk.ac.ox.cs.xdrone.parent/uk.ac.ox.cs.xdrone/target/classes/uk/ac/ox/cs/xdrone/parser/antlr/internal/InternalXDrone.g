/*
 * generated by Xtext 2.10.0
 */
grammar InternalXDrone;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.ox.cs.xdrone.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.ox.cs.xdrone.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.ox.cs.xdrone.services.XDroneGrammarAccess;

}

@parser::members {

 	private XDroneGrammarAccess grammarAccess;

    public InternalXDroneParser(TokenStream input, XDroneGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected XDroneGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getSubProgramsFunParserRuleCall_0_0());
				}
				lv_subPrograms_0_0=ruleFun
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"subPrograms",
						lv_subPrograms_0_0,
						"uk.ac.ox.cs.xdrone.XDrone.Fun");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getMainMainParserRuleCall_1_0());
				}
				lv_main_1_0=ruleMain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"main",
						lv_main_1_0,
						"uk.ac.ox.cs.xdrone.XDrone.Main");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFun
entryRuleFun returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunRule()); }
	iv_ruleFun=ruleFun
	{ $current=$iv_ruleFun.current; }
	EOF;

// Rule Fun
ruleFun returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fun'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunAccess().getFunKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='input'
			{
				newLeafNode(otherlv_2, grammarAccess.getFunAccess().getInputKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunAccess().getParametersParameterParserRuleCall_2_1_0());
					}
					lv_parameters_3_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"uk.ac.ox.cs.xdrone.XDrone.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFunAccess().getBodyBodyParserRuleCall_3_0());
				}
				lv_body_4_0=ruleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunRule());
					}
					set(
						$current,
						"body",
						lv_body_4_0,
						"uk.ac.ox.cs.xdrone.XDrone.Body");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"uk.ac.ox.cs.xdrone.XDrone.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='number'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTypeAccess().getNumberKeyword());
	}
;

// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	iv_ruleMain=ruleMain
	{ $current=$iv_ruleMain.current; }
	EOF;

// Rule Main
ruleMain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='main'
		{
			newLeafNode(otherlv_0, grammarAccess.getMainAccess().getMainKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMainAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMainRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='input'
			{
				newLeafNode(otherlv_2, grammarAccess.getMainAccess().getInputKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMainAccess().getParametersParameterParserRuleCall_2_1_0());
					}
					lv_parameters_3_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMainRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"uk.ac.ox.cs.xdrone.XDrone.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_4='begin'
		{
			newLeafNode(otherlv_4, grammarAccess.getMainAccess().getBeginKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMainAccess().getCommandsCommandParserRuleCall_4_0_0());
					}
					lv_commands_5_0=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMainRule());
						}
						add(
							$current,
							"commands",
							lv_commands_5_0,
							"uk.ac.ox.cs.xdrone.XDrone.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=';'
				{
					newLeafNode(otherlv_6, grammarAccess.getMainAccess().getSemicolonKeyword_4_1());
				}
			)?
		)*
		(
			otherlv_7='return'
			{
				newLeafNode(otherlv_7, grammarAccess.getMainAccess().getReturnKeyword_5_0());
			}
			{
				newCompositeNode(grammarAccess.getMainAccess().getCommandParserRuleCall_5_1());
			}
			ruleCommand
			{
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_9='end'
		{
			newLeafNode(otherlv_9, grammarAccess.getMainAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	iv_ruleBody=ruleBody
	{ $current=$iv_ruleBody.current; }
	EOF;

// Rule Body
ruleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBodyAccess().getBlockExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='begin'
		{
			newLeafNode(otherlv_1, grammarAccess.getBodyAccess().getBeginKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBodyAccess().getCommandsCommandParserRuleCall_2_0_0());
					}
					lv_commands_2_0=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBodyRule());
						}
						add(
							$current,
							"commands",
							lv_commands_2_0,
							"uk.ac.ox.cs.xdrone.XDrone.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=';'
				{
					newLeafNode(otherlv_3, grammarAccess.getBodyAccess().getSemicolonKeyword_2_1());
				}
			)?
		)*
		(
			otherlv_4='return'
			{
				newLeafNode(otherlv_4, grammarAccess.getBodyAccess().getReturnKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getBodyAccess().getCommandParserRuleCall_3_1());
			}
			ruleCommand
			{
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getBodyAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current.getText(); }
	EOF;

// Rule Command
ruleCommand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='home'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandAccess().getHomeKeyword_0());
		}
		    |
		kw='emergencyStop'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandAccess().getEmergencyStopKeyword_1());
		}
		    |
		kw='UP'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandAccess().getUPKeyword_2());
		}
		    |
		kw='DOWN'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandAccess().getDOWNKeyword_3());
		}
		    |
		kw='LEFT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandAccess().getLEFTKeyword_4());
		}
		    |
		kw='RIGHT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandAccess().getRIGHTKeyword_5());
		}
		    |
		kw='FORWARD'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandAccess().getFORWARDKeyword_6());
		}
		    |
		kw='BACKWARD'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandAccess().getBACKWARDKeyword_7());
		}
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='+'
			{
				newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.ox.cs.xdrone.XDrone.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='*'
			{
				newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.ox.cs.xdrone.XDrone.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNumberParserRuleCall_0());
		}
		this_Number_0=ruleNumber
		{
			$current = $this_Number_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1());
			}
			this_Addition_2=ruleAddition
			{
				$current = $this_Addition_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current; }
	EOF;

// Rule Number
ruleNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
