/*
 * generated by Xtext 2.10.0
 */
package uk.ac.ox.cs.xdrone.web

import com.google.inject.Inject
import java.io.File
import java.io.FileWriter
import java.io.IOException
import java.util.Map
import org.eclipse.xtext.web.server.IServiceContext
import org.eclipse.xtext.web.server.InvalidRequestException
import org.eclipse.xtext.web.server.XtextServiceDispatcher
import org.eclipse.xtext.web.server.persistence.IResourceBaseProvider
import org.eclipse.xtext.web.server.model.DocumentStateResult


class XDroneServiceDispatcher extends XtextServiceDispatcher {

    @Inject IResourceBaseProvider resourceBaseProvider

    override protected createServiceDescriptor(String serviceType, IServiceContext context) {
        switch serviceType {
            case 'deploy':
                getDeployService(context)
            case 'save':
            	getStoreResourceService(context)
            default:
                super.createServiceDescriptor(serviceType, context)
        }
    }
    
    
	protected def getStoreResourceService(IServiceContext context) throws InvalidRequestException {
		val resourceId = context.getParameter('resource')
		if (resourceId === null)
			throw new InvalidRequestException('The parameter \'resource\' is required.')
		
	}

	protected def getDeployService(IServiceContext context) throws InvalidRequestException {
		val resourceId = context.getParameter('resource')
		if (resourceId === null)
			throw new InvalidRequestException('The parameter \'resource\' is required.')
		new ServiceDescriptor => [
			service = [
				try {
					
					val uri = resourceBaseProvider.getFileURI(resourceId)
					val file = new File(uri.toFileString)
						var FileWriter writer
						try {
							writer = new FileWriter(file)
							val fullText = context.getParameter('fullText')
							if (fullText !== null)
								writer.write(fullText)
						} finally {
							if (writer !== null)
								writer.close()
						}
						val document = getResourceDocument(resourceId, context)
						
						println("preparing to run command: /bin/bash -c /booster2/booster-deploy.sh "+file.getAbsolutePath()+" > /tmp/booster.log")
						
						val pb = new ProcessBuilder().inheritIO()
						.command("/bin/bash", "-c", "/booster2/booster-deploy.sh "+file.getAbsolutePath()+" > /tmp/booster.log").start();
						
						if (!pb.alive){
							println("exit code: "+pb.exitValue)
							
						}
						
						return new DocumentStateResult(document.stateId)
						
				} catch (Throwable throwable) {
					handleError(throwable)
				}
			]
			hasSideEffects = true
		]

	}

}